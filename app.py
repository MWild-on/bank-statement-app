import streamlit as st
import pandas as pd
import re
from io import BytesIO
from datetime import datetime
from natasha import MorphVocab, NamesExtractor

# ===== –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è =====
CREDENTIALS = {
    "Mariam": "Mariam4321",
}

def login():
    st.title("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    with st.form("login_form"):
        username = st.text_input("–õ–æ–≥–∏–Ω")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")
        if submitted:
            if username in CREDENTIALS and CREDENTIALS[username] == password:
                st.session_state["auth"] = True
                st.session_state["user"] = username
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

if "auth" not in st.session_state or not st.session_state["auth"]:
    login()
    st.stop()

morph_vocab = MorphVocab()
names_extractor = NamesExtractor(morph_vocab)

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====

def extract_bank_account(text):
    match = re.search(r'\b\d{20}\b', str(text))
    return match.group(0) if match else ""

def extract_is_from_bailiff(text):
    text = str(text).lower().replace('\n', ' ')
    keywords = [
        "—É—Ñ–∫", "—Ä–æ—Å–ø", "–æ—Å–ø", "—É—Ñ—Å—Å–ø", "–≥—É—Å—Å–ø", "–≥—É—Ñ—Å—Å–ø",
        "—Ñ—Å—Å–ø", "—Ñ—Å—Å–ø —Ä–æ—Å—Å–∏–∏", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞ —Å—É–¥–µ–±–Ω—ã—Ö –ø—Ä–∏—Å—Ç–∞–≤–æ–≤"
    ]
    return "Y" if any(kw in text for kw in keywords) else "N"

def extract_court_order_number(text):
    text = str(text).lower()
    priority_match = re.search(r'\b(–≤—Å|—Ñ—Å)\s?(\d{9})\b', text)
    if priority_match:
        return f"{priority_match.group(1).upper()} {priority_match.group(2)}"

    match_id_direct = re.search(r'\b–∏–¥\s+([\d\-]+/\d{4}(?:-\d{1,3})?)\b', text)
    if match_id_direct:
        return match_id_direct.group(1)

    patterns = [
        r'‚Ññ[–∞-—èa-z]+[\d\-]*-([\d\-]+/\d{4}(?:-\d{1,3})?)',
        r'(?:—Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑|—Å—É–¥\.? –ø—Ä–∏–∫–∞–∑|—Å/–ø—Ä)[^\d]{0,3}([\d]{1,2}-\d{1,4}-\d{1,5}/\d{4})',
        r'(?:—Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑|—Å—É–¥\.? –ø—Ä–∏–∫–∞–∑|—Å/–ø—Ä)\s*(?:‚Ññ|:)?\s*([\d\-/]+)',
        r'–≤–∑—ã—Å–∫–∞–Ω–∏–µ –ø–æ –∏–¥ –æ—Ç \d{2}\.\d{2}\.\d{4} ?‚Ññ([\d\-/]+)',
        r'–ø–æ –∏/–¥\s*‚Ññ?\s*([\d\-/]+)',
        r'\b–∏/–¥\s*‚Ññ?\s*([\d\-/]+)',
        r'(?:–ø–æ\s+)?–∏/–ª\s*(?:‚Ññ|n)?\s*([\d\-/]+)',
        r'\b(?:–∏–¥ n|–∏–¥|n)\s*(?:‚Ññ|n)?\s*([\d\-]+/\d{4}(?:-\d{1,3})?)\b',
        r'‚Ññ\s*([\d\-]+/\d{4}(?:-\d{1,3})?)',
        r'—Å—É–¥\.–ø—Ä\s*([\d\-]+/[\d\-]+)',
        r'–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç\s*([\d\-]+/\d{4})',
        r'\b–∏–ª\s+([\d\-]+/\d{4})',
        r'–∏/–ª\s*(?:‚Ññ|n)?\s*([\w\-]+/\d{4})',
        r'–ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É\s+([\d\-]+/\d{4})',
        r'—Å/–ø\s*([\–¥\-]+/\d{4})',
    ]

    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            value = match.group(1)
            if len(value.strip()) < 5:
                continue
            before = text[:match.start()]
            if re.search(r'(–∏–ø|\b–∏—Å–ø\w*)\s*$', before.strip()[-20:]):
                continue
            if re.search(r'-–∏–ø$', value):
                continue
            return value

    return ""

def extract_court_order_date(text, court_number):
    text = str(text).lower()
    court_number = court_number.strip().lower()
    if not court_number or len(court_number) < 5:
        return ""
    text_clean = re.sub(r'[()\[\]]', ' ', text)
    match_pos = text_clean.find(court_number)
    if match_pos == -1:
        return ""
    context = text_clean[max(0, match_pos - 50): match_pos + 50]
    date_patterns = [
        r'–æ—Ç\s*(\d{2}\.\d{2}\.\d{4})',
        r'–æ—Ç\s*(\d{4}-\d{2}-\d{2})',
        r'(\d{2}\.\d{2}\.\d{4})',
        r'(\d{4}-\d{2}-\d{2})'
    ]
    for pattern in date_patterns:
        match = re.search(pattern, context)
        if match:
            return match.group(1)
    return ""

def extract_ip_number(text):
    text = str(text).lower()
    match1 = re.search(r'(?:–∏/–ø|–∏–ø)?[ ‚Ññ:]*([0-9]{4,8}/[0-9]{2}/[0-9]{4,8}-–∏–ø)\b', text)
    if match1:
        return match1.group(1)
    match2 = re.search(r'(?:–∏/–ø|–∏–ø)?[ ‚Ññ:]*([0-9]{4,8}/[0-9]{2}/[0-9]{4,8})\b', text)
    if match2:
        before = text[:match2.start()]
        if "–∏–¥" not in before[-20:]:
            return match2.group(1)
    match3 = re.search(r'\(–∏–ø\s+([\w\-\/]+)', text)
    if match3:
        return match3.group(1)
    return ""

def extract_fio(text):
    text = str(text)
    patterns = [
        r'\b—Å\s+([–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+)',
        r'\b–¥–æ–ª–≥[–∞]?:\s*([–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+)',
        r'\b–¥–æ–ª–∂–Ω–∏–∫–∞:\s*([–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+)',
        r'—Å –¥–æ–ª–∂–Ω–∏–∫–∞\s+([–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+)',
        r'–¥–æ–ª–≥–∞ –≤–∑—ã—Å–∫–∞—Ç–µ–ª—é\s*:\s*([–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+)',
        r'\b—Å:\s*([–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+)',
    ]
    for pattern in patterns:
        match = re.search(pattern, text, flags=re.IGNORECASE)
        if match:
            return match.group(1).title().strip()
    matches = list(names_extractor(text))
    if matches:
        fact = matches[0].fact
        fio = ' '.join(filter(None, [fact.last, fact.first, fact.middle]))
        if len(fio) >= 10 and len(fio.split()) >= 3:
            return fio.strip()
    return ""

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====

def process_bank_statement(df):
    df = df[pd.to_numeric(df["–°—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"], errors="coerce") > 0].copy()
    result = pd.DataFrame()
    result["CaseID"] = ""
    result["TransactionType"] = "–û–ø–ª–∞—Ç–∞"
    result["Sum"] = df["–°—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"]
    result["PaymentDate"] = pd.to_datetime(df["–î–∞—Ç–∞ –ø—Ä–æ–≤–æ–¥–∫–∏"], errors="coerce").dt.date
    result["BookingDate"] = datetime.now().date()
    result["BankAccount"] = df["–ö—Ä–µ–¥–∏—Ç"].apply(extract_bank_account)
    result["InvoiceNum"] = ""
    result["InvoiceID"] = ""
    result["PaymentProvider"] = ""
    result["IsFromBailiff"] = df["–°—á–µ—Ç"].apply(extract_is_from_bailiff)
    result["CourtOrderNumber"] = df["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"].apply(extract_court_order_number)
    result["–î–∞—Ç–∞ –ø—Ä–∏–∫–∞–∑–∞"] = df.apply(lambda row: extract_court_order_date(row["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"], extract_court_order_number(row["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"])), axis=1)
    result["–ù–æ–º–µ—Ä –ò–ü"] = df["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"].apply(extract_ip_number)
    result["–§–ò–û"] = df["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"].apply(extract_fio)
    result["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"] = df["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"]
    return result

# ===== –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit =====

st.set_page_config(page_title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–∏—Å–∫–∏", layout="centered")
st.title("üìÑ –ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏")

# === –ò—Å—Ç–æ—Ä–∏—è –∏ –ø–æ–¥—Å—á—ë—Ç—ã –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã ===
# import os, json ...
# st.markdown("### üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):") ...

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤—ã–ø–∏—Å–∫–∏ (Excel)", type=["xlsx", "xls"])

if uploaded_file:
    try:
        df_raw = pd.read_excel(uploaded_file, skiprows=2)
        df_raw.columns.values[1] = "–î–∞—Ç–∞ –ø—Ä–æ–≤–æ–¥–∫–∏"
        df_raw.columns.values[4] = "–°—á–µ—Ç"
        df_raw.columns.values[6] = "–î–µ–±–µ—Ç"
        df_raw.columns.values[8] = "–ö—Ä–µ–¥–∏—Ç"
        df_raw.columns.values[13] = "–°—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"
        df_raw.columns.values[14] = "‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        df_raw.columns.values[20] = "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"

        df = df_raw.copy()
        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!")
        df_result = process_bank_statement(df)

        col1, col2 = st.columns([3, 1])
        with col1:
            st.subheader("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç")
        with col2:
            output = BytesIO()
            df_result.to_excel(output, index=False, engine='openpyxl')
            st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (Excel)", data=output.getvalue(), file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç.xlsx")

        st.dataframe(df_result)

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
