import streamlit as st
import pandas as pd
import re
from io import BytesIO
from datetime import datetime

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====

def extract_bank_account(text):
    match = re.search(r'\b\d{20}\b', str(text))
    return match.group(0) if match else ""

def extract_is_from_bailiff(text):
    text = str(text).lower().replace('\n', ' ')
    keywords = [
        "—É—Ñ–∫", "—Ä–æ—Å–ø", "–æ—Å–ø", "—É—Ñ—Å—Å–ø", "–≥—É—Å—Å–ø", "–≥—É—Ñ—Å—Å–ø",
        "—Ñ—Å—Å–ø", "—Ñ—Å—Å–ø —Ä–æ—Å—Å–∏–∏", "–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞ —Å—É–¥–µ–±–Ω—ã—Ö –ø—Ä–∏—Å—Ç–∞–≤–æ–≤"
    ]
    return "Y" if any(kw in text for kw in keywords) else "N"

def extract_court_order_number(text):
    text = str(text).lower()

    # –í–∞—Ä–∏–∞–Ω—Ç 1: "–°—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑" –∏–ª–∏ –µ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    match1 = re.search(r'(?:—Å—É–¥–µ–±–Ω—ã–π –ø—Ä–∏–∫–∞–∑|—Å—É–¥\.? –ø—Ä–∏–∫–∞–∑|—Å/–ø—Ä)\s*(?:‚Ññ|:)?\s*([\d\-\/]+)', text)
    if match1:
        return match1.group(1)


    # –í–∞—Ä–∏–∞–Ω—Ç 2: "–í–∑—ã—Å–∫–∞–Ω–∏–µ –ø–æ –ò–î –æ—Ç <–¥–∞—Ç–∞> ‚Ññ..."
    match2 = re.search(r'–≤–∑—ã—Å–∫–∞–Ω–∏–µ –ø–æ –∏–¥ –æ—Ç \d{2}\.\d{2}\.\d{4} ?‚Ññ([\d\-\/]+)', text)
    if match2:
        return match2.group(1)

    # –í–∞—Ä–∏–∞–Ω—Ç 3: "–∏/–¥" + –Ω–æ–º–µ—Ä
    match3 = re.search(r'–ø–æ –∏/–¥\s*‚Ññ?\s*([\d\-\/]+)', text)
    if match3:
        return match3.group(1)

    # –í–∞—Ä–∏–∞–Ω—Ç 4: "–ø–æ –∏/–ª" + –Ω–æ–º–µ—Ä
    match4 = re.search(r'–ø–æ –∏/–ª\s*([\d\-\/]+)', text)
    if match4:
        return match4.group(1)

        
    # –í–∞—Ä–∏–∞–Ω—Ç 5: "–∏–¥", "–∏–¥ n", –∏–ª–∏ "n", –∑–∞—Ç–µ–º –≥–¥–µ-—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–æ–º–µ—Ä —Å –≥–æ–¥–æ–º
    match5 = re.search(r'(?:–∏–¥ n|–∏–¥|n)\s*‚Ññ?\s*.*?([\d\-]+/(?:1[0-9]|2[0-9]|30|201[0-9]|202[0-9]|2030))', text)
    if match5:
        return match5.group(1)


    return ""

    
def extract_ip_number(text):
    text = str(text).lower()

    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ò–ü —Å –¥–µ—Ñ–∏—Å–æ–º –∏ –≥–æ–¥–æ–º
    match1 = re.search(r'(?:–∏/–ø|–∏–ø)[ ‚Ññ:]*([\d\-]+/(?:20|2[1-9]|30|201[0-9]|202[0-9]|2030))\b', text)
    if match1:
        return match1.group(1)

    # –í–∞—Ä–∏–∞–Ω—Ç 2: 6+ —Ü–∏—Ñ—Ä (—Å—Ç–∞—Ä—ã–π –ø—Ä–æ—Å—Ç–æ–π)
    match2 = re.search(r'(?:–∏/–ø|–∏–ø)[ ‚Ññ:]*([0-9]{6,})', text)
    if match2:
        return match2.group(1)

    # –í–∞—Ä–∏–∞–Ω—Ç 3: —Ñ–æ—Ä–º–∞—Ç —Ç–∏–ø–∞ 12345/24/00001 —Å -–∏–ø –∏–ª–∏ –±–µ–∑ –Ω–µ–≥–æ
    match3 = re.search(r'(\d{4,6}/\d{2}/\d{4,6})(?:-–∏–ø)?', text)
    if match3:
        return match3.group(1)

    return ""


# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö =====

def process_bank_statement(df):
    result = pd.DataFrame()
    result["CaseID"] = ""
    result["TransactionType"] = "–û–ø–ª–∞—Ç–∞"
    result["Sum"] = df["–°—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"]
    result["PaymentDate"] = pd.to_datetime(df["–î–∞—Ç–∞ –ø—Ä–æ–≤–æ–¥–∫–∏"], errors="coerce").dt.date
    result["BookingDate"] = datetime.now().date()
    result["BankAccount"] = df["–ö—Ä–µ–¥–∏—Ç"].apply(extract_bank_account)
    result["InvoiceNum"] = ""
    result["InvoiceID"] = ""
    result["PaymentProvider"] = ""
    result["IsFromBailiff"] = df["–°—á–µ—Ç"].apply(extract_is_from_bailiff)
    result["CourtOrderNumber"] = df["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"].apply(extract_court_order_number)
    result["‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞"] = df["‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞"]
    result["–ù–æ–º–µ—Ä –ò–ü"] = df["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"].apply(extract_ip_number)
    #result["–§–ò–û"] = df["–°—á–µ—Ç"].apply(extract_fio_from_account)
    result["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"] = df["–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"]  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ
    return result

# ===== –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit =====

st.set_page_config(page_title="–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–∏—Å–∫–∏", layout="centered")
st.title("üìÑ –ê–Ω–∞–ª–∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –≤—ã–ø–∏—Å–∫–∏")

import os
import json

# –ü—É—Ç—å –∫ –∏—Å—Ç–æ—Ä–∏–∏
history_file = "history.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
history = []
if os.path.exists(history_file):
    with open(history_file, "r") as f:
        try:
            history = json.load(f)
        except:
            history = []

# –í—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π (–≤—Å–µ–≥–¥–∞)
st.markdown("### üßæ –ò—Å—Ç–æ—Ä–∏—è –æ–±—Ä–∞–±–æ—Ç–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):")
if history:
    for record in history[-5:][::-1]:
        court = record.get("court_count", record.get("count", 0))  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ 'count'
        ip = record.get("ip_count", 0)

        st.markdown(
            f"‚Ä¢ **{record['timestamp']}** ‚Äî "
            f"`CourtOrderNumber`: **{court}**, "
            f"`–ù–æ–º–µ—Ä –ò–ü`: **{ip}**, "

        )
else:
    st.markdown("_–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞_")


uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤—ã–ø–∏—Å–∫–∏ (Excel)", type=["xlsx", "xls"])

if uploaded_file:

    try:
        # –ß—Ç–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞, —Ä—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        df_raw = pd.read_excel(uploaded_file, skiprows=2)

        # –ù–∞–∑–Ω–∞—á–∏–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤—Ä—É—á–Ω—É—é
        df_raw.columns.values[1] = "–î–∞—Ç–∞ –ø—Ä–æ–≤–æ–¥–∫–∏"
        df_raw.columns.values[4] = "–°—á–µ—Ç"
        df_raw.columns.values[6] = "–î–µ–±–µ—Ç"
        df_raw.columns.values[8] = "–ö—Ä–µ–¥–∏—Ç"
        df_raw.columns.values[13] = "–°—É–º–º–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"
        df_raw.columns.values[14] = "‚Ññ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
        df_raw.columns.values[20] = "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"

        df = df_raw.copy()

        st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!")
        df_result = process_bank_statement(df)
        # –ü–æ–¥—Å—á—ë—Ç –∑–∞–ø–∏—Å–µ–π —Å CourtOrderNumber
        count_valid_court_numbers = df_result["CourtOrderNumber"].astype(str).str.strip().ne("").sum()
        st.info(f"üîé –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å CourtOrderNumber: **{count_valid_court_numbers}**")
        # –ü–æ–¥—Å—á—ë—Ç –∑–∞–ø–∏—Å–µ–π —Å –ù–æ–º–µ—Ä–æ–º –ò–ü
        count_valid_ip_number = df_result["–ù–æ–º–µ—Ä –ò–ü"].astype(str).str.strip().ne("").sum()
        st.info(f"üîé –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å –ù–æ–º–µ—Ä –ò–ü: **{count_valid_ip_number}**")


        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        history.append({
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "court_count": int(count_valid_court_numbers),
            "ip_count": int(count_valid_ip_number)

        })

        with open(history_file, "w") as f:
            json.dump(history[-20:], f, ensure_ascii=False, indent=2)

       
        st.subheader("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç")
        st.dataframe(df_result)

        output = BytesIO()
        df_result.to_excel(output, index=False, engine='openpyxl')
        st.download_button("üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç (Excel)", data=output.getvalue(), file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç.xlsx")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

